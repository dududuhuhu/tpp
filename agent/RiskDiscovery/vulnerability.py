import requests
import time
from datetime import datetime
from typing import List, Dict, Optional


class DoRequest:
    """
    专门用于发起请求的类：GET/POST
    """

    def __init__(self, path: str, method: str, data: str, timeout: int = 10):
        self.__path = path            # 请求的URL路径
        self.__method = method.upper()  # 请求方法
        self.__data = data            # 请求数据（参数）
        self.__timeout = timeout      # 超时时间

    def do_request(self) -> Optional[str]:
        """
        发起请求
        :return: 响应内容或None
        """
        if self.__method == 'GET':
            return self.__do_get()
        elif self.__method == 'POST':
            return self.__do_post()
        else:
            print(f"不支持的请求方法: {self.__method}")
            return None

    def __do_get(self) -> Optional[str]:
        try:
            url = self.__path + self.__data
            print(f"发起GET请求: {url}")
            headers = {'User-Agent': 'Mozilla/5.0'}
            response = requests.get(url, headers=headers, timeout=self.__timeout)
            return response.content.decode('utf-8', errors='ignore')
        except Exception as e:
            print(f"GET请求失败: {e}")
            return None

    def __do_post(self) -> Optional[str]:
        try:
            print(f"发起POST请求: {self.__path}")
            headers = {
                'User-Agent': 'Mozilla/5.0',
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            response = requests.post(
                url=self.__path,
                data=self.__data,
                headers=headers,
                timeout=self.__timeout
            )
            return response.content.decode('utf-8', errors='ignore')
        except Exception as e:
            print(f"POST请求失败: {e}")
            return None


class VulnerabilityScanner:
    """
    漏洞扫描器类
    """

    def __init__(self):
        self.scan_results = []

    def _get_rules_from_url(self, url: str) -> List[Dict]:
        """
        从远程接口获取漏洞规则
        """
        try:
            print(f"从远程接口获取规则: {url}")
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    print(f"成功获取 {len(data)} 条规则")
                    return data
                else:
                    print("返回格式错误，应为列表")
            else:
                print(f"获取失败，状态码: {response.status_code}")
        except Exception as e:
            print(f"获取规则失败: {e}")
        return []

    def scan_vulnerability(self, rule: Dict, mac) -> Dict:
        """
        扫描单条漏洞
        """
        print(f"\n正在扫描漏洞: {rule['vulName']}")
        request_obj = DoRequest(
            path=rule['vulPath'],
            method=rule['vulRequestType'],
            data=rule['vulPayload']
        )

        start_time = time.time()
        response_content = request_obj.do_request()
        end_time = time.time()

        scan_result = {
            'mac': mac,
            'rule_id': rule.get('id'),
            'vul_name': rule['vulName'],
            'vul_type': rule['vulType'],
            'vul_level': rule['vulLevel'],
            'target_url': rule['vulPath'],
            'payload': rule['vulPayload'],
            'scan_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'response_time': round(end_time - start_time, 2),
            'is_exit': 0,  # 默认未发现漏洞
            'error_message': ''
        }

        if response_content:
            if rule['vulFlag'] in response_content:
                scan_result['is_exit'] = 1  # ✅ 发现漏洞
                print(f"✓ 发现漏洞: {rule['vulName']}")
            else:
                print(f"✗ 未发现漏洞: {rule['vulName']}")
        else:
            scan_result['error_message'] = '请求失败，无法获取响应'
            print(f"✗ 扫描失败: {rule['vulName']}")

        return scan_result

    def batch_scan(self, rules: List[Dict],mac) -> List[Dict]:
        """
        批量扫描漏洞规则
        """
        print(f"\n开始批量扫描，共 {len(rules)} 条规则")
        results = []

        for i, rule in enumerate(rules, 1):
            print(f"\n[{i}/{len(rules)}] ", end='')
            result = self.scan_vulnerability(rule,mac)
            results.append(result)
            time.sleep(0.5)  # 减轻压力

        return results

    def run_scan(self, url: str,mac):
        """
        启动漏洞扫描（从URL加载规则）
        """
        print("=== 漏洞扫描器启动 ===")
        rules = self._get_rules_from_url(url)
        if not rules:
            print("未获取到任何规则，终止扫描")
            return

        results = self.batch_scan(rules,mac)
        print("=== 扫描完成 ===")
        return results


# 主程序入口
if __name__ == "__main__":
    scanner = VulnerabilityScanner()
    rule_url = "http://127.0.0.1:8080/rule/vulnRules"  # ✔ 请根据实际修改接口地址
    scan_results = scanner.run_scan(rule_url)
